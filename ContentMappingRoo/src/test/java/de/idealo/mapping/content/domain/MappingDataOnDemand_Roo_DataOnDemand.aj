// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.idealo.mapping.content.domain;

import de.idealo.mapping.content.domain.Mapping;
import de.idealo.mapping.content.domain.MappingDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect MappingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MappingDataOnDemand: @Component;
    
    private Random MappingDataOnDemand.rnd = new SecureRandom();
    
    private List<Mapping> MappingDataOnDemand.data;
    
    public Mapping MappingDataOnDemand.getNewTransientMapping(int index) {
        Mapping obj = new Mapping();
        setCountry(obj, index);
        setCreated(obj, index);
        setId(obj, index);
        setSource(obj, index);
        setTarget(obj, index);
        return obj;
    }
    
    public void MappingDataOnDemand.setCountry(Mapping obj, int index) {
        String country = "country_" + index;
        obj.setCountry(country);
    }
    
    public void MappingDataOnDemand.setCreated(Mapping obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void MappingDataOnDemand.setId(Mapping obj, int index) {
        Long id = new Integer(index).longValue();
        obj.setId(id);
    }
    
    public void MappingDataOnDemand.setSource(Mapping obj, int index) {
        String source = "source_" + index;
        obj.setSource(source);
    }
    
    public void MappingDataOnDemand.setTarget(Mapping obj, int index) {
        String target = "target_" + index;
        obj.setTarget(target);
    }
    
    public Mapping MappingDataOnDemand.getSpecificMapping(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Mapping obj = data.get(index);
        Long id = obj.getId_();
        return Mapping.findMapping(id);
    }
    
    public Mapping MappingDataOnDemand.getRandomMapping() {
        init();
        Mapping obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return Mapping.findMapping(id);
    }
    
    public boolean MappingDataOnDemand.modifyMapping(Mapping obj) {
        return false;
    }
    
    public void MappingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Mapping.findMappingEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Mapping' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Mapping>();
        for (int i = 0; i < 10; i++) {
            Mapping obj = getNewTransientMapping(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
